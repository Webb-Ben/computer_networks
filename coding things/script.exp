#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Oct  7 17:48:28 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn nc localhost 25
match_max 100000
expect -exact "220 gloin.cs.colby.edu ESMTP Postfix (Ubuntu)\r\r
"
send -- "HELO gloo"
expect -exact " "
send -- "in.cs.cob"
expect -exact " "
send -- "lby.edu\r"
expect -exact "lby.edu\r
250 gloin.cs.colby.edu\r\r
"
send -- "mail from: cs2"
expect -exact " "
send -- "331@glon"
expect -exact " "
send -- "o"
expect -exact " "
send -- "in.cs.colby.edu\r"
expect -exact "in.cs.colby.edu\r
250 2.1.0 Ok\r\r
"
send -- "rcpt to: bmwebb20@cs."
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- "gloin.cs.colby.edu\r"
expect -exact "gloin.cs.colby.edu\r
250 2.1.5 Ok\r\r
"
send -- "data\r"
expect -exact "data\r
354 End data with <CR><LF>.<CR><LF>\r\r
"
send -- "subject: M"
expect -exact " "
send -- "eMail\r"
expect -exact "eMail\r
"
send -- "this is the body of part c."
expect -exact " "
send -- "\r"
expect -exact "\r
"
send -- ".\r"
expect -exact ".\r
250 2.0.0 Ok: queued as 179C57C007F\r\r
"
send -- "quit\r"
expect -exact "quit\r
221 2.0.0 Bye\r\r
"
send -- "expect eof\r"
expect eof
